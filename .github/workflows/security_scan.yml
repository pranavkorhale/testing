name: MobSF Security Scan

on:
  workflow_dispatch:
    inputs:
      apk_path:
        description: 'Path to the APK file'
        required: true
        default: 'first.apk'

jobs:
  mobsf_scan:
    name: Run MobSF Scan
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install requests

      - name: Check MobSF API key
        id: check-api
        run: |
          if [ -z "${{ secrets.MOBSF_API_KEY }}" ]; then
            echo "::error::MobSF API key not found. Please set MOBSF_API_KEY in repository secrets."
            exit 1
          fi

      - name: Run MobSF Scan
        id: scan
        env:
          MOBSF_API_KEY: ${{ secrets.MOBSF_API_KEY }}
          MOBSF_URL: http://localhost:8000/api/v1
        run: |
          echo "Running MobSF scan..."

          APK_PATH="${{ github.event.inputs.apk_path }}"
          if [ ! -f "$APK_PATH" ]; then
            echo "::error::APK file not found at $APK_PATH"
            exit 1
          fi

          python3 <<EOF
import requests
import time
import json
import os
import sys

MOBSF_URL = os.getenv("MOBSF_URL")
API_KEY = os.getenv("MOBSF_API_KEY")
APK_PATH = "${APK_PATH}"

headers = {"Authorization": API_KEY}

# Upload APK
with open(APK_PATH, "rb") as f:
    files = {'file': (os.path.basename(APK_PATH), f, 'application/vnd.android.package-archive')}
    r = requests.post(f"{MOBSF_URL}/upload", files=files, headers=headers)

    if r.status_code != 200:
        print(f"::error::Upload failed: {r.text}")
        sys.exit(1)

    file_hash = r.json().get("hash")

# Start scan
scan_res = requests.post(f"{MOBSF_URL}/scan", data={"hash": file_hash, "scan_type": "apk"}, headers=headers)
if scan_res.status_code != 200:
    print(f"::error::Scan failed: {scan_res.text}")
    sys.exit(1)

# Wait for scan to complete
print("Waiting for scan to complete...")
for _ in range(30):
    status = requests.get(f"{MOBSF_URL}/scan_status?hash={file_hash}", headers=headers)
    if status.status_code == 200 and status.json().get("status") == "completed":
        break
    time.sleep(10)
else:
    print("::error::Scan timeout")
    sys.exit(1)

# Get report
report = requests.get(f"{MOBSF_URL}/report_json", params={"hash": file_hash}, headers=headers)
if report.status_code != 200:
    print(f"::error::Report fetch failed: {report.text}")
    sys.exit(1)

with open("mobsf_report.json", "w") as f:
    f.write(report.text)

data = report.json()
critical = data.get("security_score", {}).get("critical", 0)

# Print summary
print("Critical issues:", critical)
if critical > 0:
    print("::error::Critical issues detected.")
    sys.exit(1)
EOF

      - name: Upload MobSF Report
        uses: actions/upload-artifact@v4
        with:
          name: mobsf-report
          path: mobsf_report.json
