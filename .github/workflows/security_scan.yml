name: Mobile App Security Scan

on:
  push:
    branches: [main, develop]
    paths:
      - '**/*.apk'
  pull_request:
    branches: [main, develop]
    paths:
      - '**/*.apk'
  workflow_dispatch:
    inputs:
      apk_path:
        description: 'Path to APK file to scan'
        required: true
        default: 'app/build/outputs/apk/release/app-release.apk'

jobs:
  security-scan:
    name: MobSF Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      mobsf:
        image: opensecurity/mobile-security-framework-mobsf:latest
        ports:
          - 8000:8000
        options: --health-cmd "curl -f http://localhost:8000/ || exit 1" --health-interval 10s --health-timeout 5s --health-retries 5

    env:
      MOBSF_URL: http://localhost:8000/api/v1
      MOBSF_API_KEY: ${{ secrets.MOBSF_API_KEY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install requests jq

      - name: Determine APK path
        id: apk-path
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            APK_PATH="${{ github.event.inputs.apk_path }}"
          else
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} || echo "")
            CHANGED_APKS=$(echo "$CHANGED_FILES" | grep '\.apk$' || true)
            APK_PATH=$(echo "$CHANGED_APKS" | head -n 1)
            if [ -z "$APK_PATH" ]; then
              echo "::warning::No changed APKs found. Using default path."
              APK_PATH="app/build/outputs/apk/release/app-release.apk"
            fi
          fi

          if [ ! -f "$APK_PATH" ]; then
            echo "::warning::APK not found at specified path, searching project..."
            APK_PATH=$(find . -name "*.apk" | head -n 1 || echo "")
            if [ -z "$APK_PATH" ]; then
              echo "::error::No APK file found in the repository"
              exit 1
            fi
          fi

          echo "Using APK at: $APK_PATH"
          echo "apk_path=${APK_PATH}" >> $GITHUB_OUTPUT

      - name: Wait for MobSF to be ready
        run: |
          echo "Waiting for MobSF to start..."
          for i in {1..12}; do
            if curl -s http://localhost:8000/ >/dev/null; then
              echo "MobSF is ready"
              exit 0
            fi
            echo "Attempt $i/12 - MobSF not ready yet..."
            sleep 5
          done
          echo "::error::MobSF did not start within 60 seconds"
          exit 1

      - name: Run MobSF Scan
        id: scan
        continue-on-error: true
        run: |
          echo "Running MobSF scan..."
          cat > scan_apk.py << 'EOF'
          import requests, json, sys, time, os
          def scan(apk_path, api_key):
              base = "http://localhost:8000/api/v1"
              headers = {"Authorization": api_key}
              print(f"Uploading {apk_path}")
              with open(apk_path, 'rb') as f:
                  res = requests.post(f"{base}/upload", files={'file': f}, headers=headers)
              if res.status_code != 200:
                  print("::error::Upload failed:", res.text)
                  return False
              file_hash = res.json().get("hash")
              print("Scanning...")
              scan_res = requests.post(f"{base}/scan", data={"hash": file_hash, "scan_type": "apk"}, headers=headers)
              if scan_res.status_code != 200:
                  print("::error::Scan failed:", scan_res.text)
                  return False
              for _ in range(30):
                  r = requests.get(f"{base}/scan_status?hash={file_hash}", headers=headers)
                  if r.json().get("status") == "completed":
                      break
                  time.sleep(10)
              else:
                  print("::error::Scan timed out")
                  return False
              report = requests.get(f"{base}/report/{file_hash}", headers=headers).json()
              with open("mobsf_report.json", "w") as f: json.dump(report, f, indent=2)
              summary = {
                  "app": report.get("file_name"),
                  "pkg": report.get("package_name"),
                  "ver": report.get("version_name"),
                  "score": report.get("security_score", {}).get("average_cvss", 0),
                  "crit": report.get("security_score", {}).get("critical", 0)
              }
              with open("scan_summary.json", "w") as f: json.dump(summary, f, indent=2)
              return summary["crit"] == 0
          if __name__ == "__main__":
              sys.exit(0 if scan(sys.argv[1], sys.argv[2]) else 1)
          EOF

          python scan_apk.py "${{ steps.apk-path.outputs.apk_path }}" "${{ secrets.MOBSF_API_KEY }}"

      - name: Upload reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mobsf-reports-${{ github.run_id }}
          path: |
            mobsf_report.json
            scan_summary.json

      - name: Fail if critical issues found
        if: steps.scan.outcome == 'failure'
        run: |
          echo "::error::Critical issues found!"
          exit 1
