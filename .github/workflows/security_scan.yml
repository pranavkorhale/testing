name: Mobile App Security Scan

on:
  push:
    branches: [main, develop]
    paths:
      - '**/*.apk'
  pull_request:
    branches: [main, develop]
    paths:
      - '**/*.apk'
  workflow_dispatch:
    inputs:
      apk_path:
        description: 'Path to APK file to scan'
        required: true
        default: 'app/build/outputs/apk/release/app-release.apk'

jobs:
  security-scan:
    name: MobSF Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      mobsf:
        image: opensecurity/mobile-security-framework-mobsf:latest
        ports:
          - 8000:8000
        options: >-
          --health-cmd "curl -f http://localhost:8000/ || exit 1" 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5

    env:
      MOBSF_URL: http://localhost:8000/api/v1
      MOBSF_API_KEY: ${{ secrets.MOBSF_API_KEY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install requests jq

      - name: Determine APK path
        id: apk-path
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            APK_PATH="${{ github.event.inputs.apk_path }}"
          else
            if [ "${{ github.event_name }}" == "push" ]; then
              CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} || echo "")
            else
              CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} || echo "")
            fi
            CHANGED_APKS=$(echo "$CHANGED_FILES" | grep '\.apk$' || true)
            APK_PATH=$(echo "$CHANGED_APKS" | head -n 1)
            if [ -z "$APK_PATH" ]; then
              echo "No changed APKs detected, using default path"
              APK_PATH="app/build/outputs/apk/release/app-release.apk"
            fi
          fi

          if [ ! -f "$APK_PATH" ]; then
            echo "::warning::APK not found at specified path, searching project..."
            APK_PATH=$(find . -path '*/build/outputs/apk/*.apk' | head -n 1 || echo "")
            if [ -z "$APK_PATH" ]; then
              echo "::error::No APK file found in the repository"
              exit 1
            fi
          fi

          echo "Using APK at: $APK_PATH"
          echo "apk_path=${APK_PATH}" >> $GITHUB_OUTPUT

      - name: Wait for MobSF to be ready
        run: |
          for i in {1..12}; do
            if curl -s http://localhost:8000/ >/dev/null; then
              echo "MobSF is ready"
              exit 0
            fi
            sleep 5
          done
          echo "::error::MobSF did not start within 60 seconds"
          exit 1

      - name: Run MobSF Scan
        run: |
          echo "Running MobSF scan..."
          cat > scan_apk.py << 'EOF'
import requests
import json
import os
import sys
import time

def scan_apk(apk_path, api_key):
    base_url = os.environ.get("MOBSF_URL")
    headers = {"Authorization": api_key}
    with open(apk_path, 'rb') as f:
        files = {'file': (os.path.basename(apk_path), f, 'application/vnd.android.package-archive')}
        r = requests.post(f"{base_url}/upload", files=files, headers=headers)
    if r.status_code != 200:
        print(f"::error::Upload failed: {r.text}")
        return False

    file_hash = r.json().get("hash")
    if not file_hash:
        print("::error::No file hash returned")
        return False

    r = requests.post(f"{base_url}/scan", data={"hash": file_hash, "scan_type": "apk"}, headers=headers)
    if r.status_code != 200:
        print(f"::error::Scan failed: {r.text}")
        return False

    for _ in range(30):
        status = requests.get(f"{base_url}/scan_status?hash={file_hash}", headers=headers)
        if status.status_code == 200 and status.json().get("status") == "completed":
            break
        time.sleep(10)
    else:
        print("::error::Scan timed out")
        return False

    report = requests.get(f"{base_url}/report/{file_hash}", headers=headers)
    if report.status_code != 200:
        print(f"::error::Failed to get report: {report.text}")
        return False

    with open("mobsf_report.json", "w") as f:
        json.dump(report.json(), f, indent=2)

    return True

if __name__ == "__main__":
    apk_path = sys.argv[1]
    api_key = os.environ.get("MOBSF_API_KEY")
    if not api_key:
        print("::error::MobSF API key not found")
        sys.exit(1)
    success = scan_apk(apk_path, api_key)
    sys.exit(0 if success else 1)
EOF

          python scan_apk.py "${{ steps.apk-path.outputs.apk_path }}"

      - name: Upload MobSF Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mobsf-reports-${{ github.run_id }}
          path: |
            mobsf_report.json
