name: MobSF APK Security Scan

on:
  workflow_dispatch:

jobs:
  scan:
    runs-on: ubuntu-latest

    services:
      mobsf:
        image: opensecurity/mobile-security-framework-mobsf:latest
        ports:
          - 8000:8000
        options: --health-cmd "curl -f http://localhost:8000/ || exit 1" --health-interval 10s --health-timeout 5s --health-retries 10

    env:
      MOBSF_URL: http://localhost:8000/api/v1
      MOBSF_API_KEY: ${{ secrets.MOBSF_API_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10

      - name: Install dependencies
        run: pip install requests

      - name: Add dummy APK for testing
        run: |
          mkdir -p test-apk
          curl -L -o test-apk/first.apk https://github.com/ashishb/android-security-awesome/raw/master/testing-tools/mobsf-sample-app.apk

      - name: Wait for MobSF to be ready
        run: |
          echo "Waiting for MobSF to initialize..."
          for i in {1..12}; do
            if curl -s http://localhost:8000/ > /dev/null; then
              echo "MobSF ready!"
              exit 0
            fi
            sleep 5
          done
          echo "::error::MobSF did not become ready in time."
          exit 1

      - name: Run MobSF scan
        run: |
          cat > scan.py << 'EOF'
          import requests, time, sys
          url = "http://localhost:8000/api/v1"
          headers = {'Authorization': '${{ secrets.MOBSF_API_KEY }}'}

          # Upload
          with open("test-apk/first.apk", 'rb') as f:
              r = requests.post(f"{url}/upload", files={'file': f}, headers=headers)
              if r.status_code != 200:
                  print("Upload failed:", r.text)
                  sys.exit(1)
              print("Upload successful")

          hash_ = r.json()["hash"]

          # Start Scan
          scan_res = requests.post(f"{url}/scan", data={'hash': hash_, 'scan_type': 'apk'}, headers=headers)
          if scan_res.status_code != 200:
              print("Scan start failed:", scan_res.text)
              sys.exit(1)

          # Wait for scan
          for _ in range(30):
              status = requests.get(f"{url}/scan_status?hash={hash_}", headers=headers).json()
              if status.get("status") == "completed":
                  break
              time.sleep(5)
          else:
              print("Scan timeout")
              sys.exit(1)

          # Report
          report = requests.get(f"{url}/report_json", params={'hash': hash_}, headers=headers).json()
          print("Scan Summary:")
          print(f"App Name: {report.get('app_name')}")
          print(f"Package: {report.get('package_name')}")
          print(f"Critical Issues: {report.get('security_score', {}).get('critical')}")
          if int(report.get('security_score', {}).get('critical', 0)) > 0:
              sys.exit(1)
          EOF

          python scan.py
